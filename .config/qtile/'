from subprocess import check_output, run, Popen
from lib import *

def vol1(device=None, status=None):
    if status==None:
        if device==None:
            return
        elif device=='mic':
            status = check_output("pactl get-source-volume %s | awk -F ' / ' 'FNR<2 {print  $(NF-1)}'" %mic,shell=True, encoding='utf-8')[:-2]
        else:
            status = check_output("pamixer --get-volume" ,shell=True, encoding='utf-8').split()[0]


    #   =====|----
    seg1 = (int(status) // 15) * 'I'
    seg2 = ((10 - len(seg1)) * 'I')[:-1]
    return [seg1, seg2, str(status)]

def volumechange(ok):
    def a(qtile):
        if ok:
            val = 5
        else:
            val = -5

        run('pulsemixer --change-volume ' + str(val), shell=True) #change
        status = check_output('pamixer --get-volume', shell=True, encoding='utf-8').split()[0]

        a = vol1(status=status)

        qtile.widgets_map['vol_level1'].update(' ' + a[0])
        qtile.widgets_map['vol_rest1'].update(a[1])
        qtile.widgets_map['vol_number1'].update(a[2]+'%')

        qtile.widgets_map['vol_level2'].update(' ' + a[0])
        qtile.widgets_map['vol_rest2'].update(a[1])
        qtile.widgets_map['vol_number2'].update(a[2]+'%')
    return a

def mic_vol_change(ok):
    def a(qtile):
        val = -5 + 10 * int(ok)

        com = "pactl get-source-volume %s | awk -F ' / ' 'FNR<2 {print  $(NF-1)}'" %mic
        status = check_output(com ,shell=True,encoding='utf-8')[:-2]

        com = "pactl set-source-volume %(dev)s +%(level)i%(perc)s" % {'dev': mic, 'level': val, 'perc':'%'}
        run(com ,shell=True)

        a = vol1(status=int(status)+val)

        qtile.widgets_map['mic_level1'].update(' ' + a[0])
        qtile.widgets_map['mic_rest1'].update(a[1])
        qtile.widgets_map['mic_number1'].update(a[2]+'%')

        qtile.widgets_map['mic_level2'].update(' ' + a[0])
        qtile.widgets_map['mic_rest2'].update(a[1])
        qtile.widgets_map['mic_number2'].update(a[2]+'%')
    return a

def ChangeAudioDevice(init=False):
    global devices, device_indicators


    def a(qtile):
        curr = ''.join(check_output('pactl get-default-sink', shell=True, encoding='utf-8').split())
        desired = devices[(devices.index(curr) + 1) * int(devices.index(curr) != len(devices)-1)]

        run('pactl set-default-sink ' + desired, shell=True)
        status = check_output('pamixer --get-volume', shell=True, encoding='utf-8').split()[0]

        a = vol1(status=status)

        qtile.widgets_map['vol_level1'].update(' ' +a[0])
        qtile.widgets_map['vol_rest1'].update(a[1])
        qtile.widgets_map['vol_number1'].update(a[2]+'%')
        qtile.widgets_map['AudioDeviceIndicator1'].update(' '+device_indicators[devices.index(desired)]+' ')

        qtile.widgets_map['vol_level2'].update(' ' +a[0])
        qtile.widgets_map['vol_rest2'].update(a[1])
        qtile.widgets_map['vol_number2'].update(a[2]+'%')
        qtile.widgets_map['AudioDeviceIndicator2'].update(' ' + device_indicators[devices.index(desired)] + ' ')

    if not init:
        return a

    else:
        curr = ''.join(check_output('pactl get-default-sink', shell=True, encoding='utf-8').split())
        return str(device_indicators[devices.index(curr)])

def fanSpeed(ok):
    def a(qtile):
        val = -5 + 10 *int(ok)
        curr = int(check_output('nvidia-smi --query-gpu=fan.speed --format=csv,noheader,nounits',shell=True,encoding='utf-8')[:-1])
        curr = str(curr+val)
        Popen('nvidia-settings -a "[fan:0]/GPUTargetFanSpeed="' + curr, shell=True)
    return a

        
